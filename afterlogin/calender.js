// ‡πÄ‡∏Å‡πá‡∏ö event ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏µ‡πâ (‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å localStorage ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°)
let events = [];
let currentMonth = new Date().getMonth();
let currentYear = new Date().getFullYear();

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å Date ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà‡∏õ‡∏µ-‡πÄ‡∏î‡∏∑‡∏≠‡∏ô-‡∏ß‡∏±‡∏ô (‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏ß‡∏•‡∏≤)
function onlyDate(date) {
  return new Date(date.getFullYear(), date.getMonth(), date.getDate());
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏∏‡∏î‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠ event (‡∏™‡∏µ‡∏ï‡∏≤‡∏° event)
function renderCalendar(containerId) {
  const container = document.getElementById(containerId);
  const today = new Date();
  const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
  const monthNames = ['January','February','March','April','May','June','July','August','September','October','November','December'];

  const firstDay = new Date(currentYear, currentMonth, 1).getDay();
  const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();

  let html = `
    <div class="calendar-header">
      <button onclick="changeMonth(-1)">‚Äπ</button>
      ${monthNames[currentMonth]} ${currentYear}
      <button onclick="changeMonth(1)">‚Ä∫</button>
    </div>
    <table class="calendar-table">
      <thead><tr>${days.map(d => `<th>${d}</th>`).join('')}</tr></thead>
      <tbody><tr>`;

  // ‡πÄ‡∏ï‡∏¥‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏ï‡∏≤‡∏° weekday
  for (let i = 0; i < firstDay; i++) html += "<td></td>";

  for (let date = 1; date <= daysInMonth; date++) {
    const cellDate = new Date(currentYear, currentMonth, date);
    const isToday = cellDate.toDateString() === today.toDateString();
    const isPast = cellDate < today && !isToday;
    const d = onlyDate(cellDate);

    // ‡∏´‡∏≤ event ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô (‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏Ñ‡πà start ‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
    const dayEvents = events.filter(ev => {
      const evDate = onlyDate(new Date(ev.start));
      return evDate.getTime() === d.getTime();
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á dot ‡∏™‡∏µ event ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠ event ‡∏™‡∏±‡πâ‡∏ô ‡πÜ
    let dotsHTML = '';
    let namesHTML = '';
    dayEvents.forEach(ev => {
      dotsHTML += `<div class="event-dot" style="background:${ev.color}" title="${ev.title}"></div>`;
      const shortTitle = ev.title.length > 12 ? ev.title.slice(0, 12) + '‚Ä¶' : ev.title;
      namesHTML += `<div class="event-name" style="color:${ev.color}; font-size:0.7rem; margin-top:2px;">${shortTitle}</div>`;
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á <td> ‡πÑ‡∏°‡πà‡∏°‡∏µ onclick ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î popup ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ß‡∏±‡∏ô
    html += `<td class="${isToday ? 'today' : ''} ${isPast ? 'past-day' : ''}">
      <div>${date}</div>
      <div style="display:flex; gap:4px; flex-wrap:wrap;">${dotsHTML}</div>
      ${namesHTML}
    </td>`;

    // ‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå
    if ((firstDay + date) % 7 === 0) html += "</tr><tr>";
  }

  // ‡πÄ‡∏ï‡∏¥‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  const totalCells = firstDay + daysInMonth;
  const trailingEmpty = totalCells % 7 === 0 ? 0 : 7 - (totalCells % 7);
  for (let i = 0; i < trailingEmpty; i++) {
    html += '<td></td>';
  }
  html += "</tr></tbody></table>";
  container.innerHTML = html;
}

// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô
function changeMonth(offset) {
  currentMonth += offset;
  if (currentMonth > 11) {
    currentMonth = 0;
    currentYear++;
  } else if (currentMonth < 0) {
    currentMonth = 11;
    currentYear--;
  }
  renderCalendar("calendar-mini");
  updateDocumentsPanel();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
function formatDate(y, m, d) {
  return `${y}-${String(m + 1).padStart(2, '0')}-${String(d).padStart(2, '0')}`;
}

// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ event ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡∏•‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏≠‡∏Å)
function updateDocumentsPanel() {
  const docList = document.querySelector('.panel:nth-child(4) ul');
  if (!docList) return;

  events = JSON.parse(localStorage.getItem('registeredEvents') || '[]');
  docList.innerHTML = '';

  events.forEach((ev, idx) => {
    const li = document.createElement('li');
    li.innerHTML = `
      <span class="event-dot" style="background:${ev.color}; margin-right:8px;"></span>
      ${ev.title} on ${ev.start}
      <button onclick="deleteEvent(${idx})">üóë</button>
    `;
    docList.appendChild(li);
  });
}

// ‡∏•‡∏ö event ‡∏ï‡∏≤‡∏° index ‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï localStorage ‡πÅ‡∏•‡∏∞ UI
function deleteEvent(index) {
  events.splice(index, 1);
  localStorage.setItem('registeredEvents', JSON.stringify(events));
  renderCalendar("calendar-mini");
  updateDocumentsPanel();
}

// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• event ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
document.addEventListener("DOMContentLoaded", () => {
  events = JSON.parse(localStorage.getItem('registeredEvents') || '[]');
  renderCalendar("calendar-mini");
  updateDocumentsPanel();
});
// ‡πÄ‡∏õ‡∏¥‡∏î confirm popup ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÇ‡∏´‡∏•‡∏î event ‡πÉ‡∏ô dropdown
function openConfirmPopup() {
  const popup = document.getElementById('confirm-popup');
  const select = document.getElementById('confirm-event-select');
  const msg = document.getElementById('confirm-msg');

  // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô
  select.innerHTML = '';
  msg.textContent = '';

  // ‡∏î‡∏∂‡∏á event ‡∏à‡∏≤‡∏Å localStorage
  const events = JSON.parse(localStorage.getItem('registeredEvents') || '[]');

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á option ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dropdown
  events.forEach((ev, i) => {
    const opt = document.createElement('option');
    opt.value = i;
    opt.textContent = `${ev.title} (${ev.start})`;
    select.appendChild(opt);
  });

  popup.classList.remove('hidden');
}

// ‡∏õ‡∏¥‡∏î confirm popup
function closeConfirmPopup() {
  document.getElementById('confirm-popup').classList.add('hidden');
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
function submitEventCode() {
  const select = document.getElementById('confirm-event-select');
  const inputCode = document.getElementById('confirm-code-input').value.trim().toLowerCase();
  const msg = document.getElementById('confirm-msg');

  const events = JSON.parse(localStorage.getItem('registeredEvents') || '[]');
  const index = select.value;
  const event = events[index];

  if (!event) {
    msg.style.color = 'red';
    msg.textContent = 'Please select an event.';
    return;
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° (‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á) + ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡πÄ‡∏•‡∏Ç‡∏ß‡∏±‡∏ô)
  const eventNameCode = event.title.toLowerCase().replace(/\s+/g, '');
  const eventDay = new Date(event.start).getDate();
  const validCode = eventNameCode + eventDay;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà)
  const today = new Date();
  const todayDate = today.getDate();
  const eventDate = new Date(event.start);
  eventDate.setHours(0, 0, 0, 0);
  today.setHours(0, 0, 0, 0);

  if (today.getTime() !== eventDate.getTime()) {
    msg.style.color = 'red';
    msg.textContent = 'Event registration is not active today.';
    return;
  }

  if (inputCode === validCode) {
    // ‡πÇ‡∏´‡∏•‡∏î confirmedEvents ‡∏à‡∏≤‡∏Å localStorage ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    let confirmedEvents = JSON.parse(localStorage.getItem('confirmedEvents') || '[]');

    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô event ‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°
    if (!confirmedEvents.some(ev => ev.title === event.title)) {
      confirmedEvents.push(event);

      // ‡∏•‡∏ö event ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å registeredEvents (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
      events.splice(index, 1);

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏•‡∏±‡∏ö localStorage
      localStorage.setItem('confirmedEvents', JSON.stringify(confirmedEvents));
      localStorage.setItem('registeredEvents', JSON.stringify(events));
    }

    msg.style.color = 'green';
    msg.textContent = 'Valid code! Your participation is confirmed.';
    updateConfirmedActivities();
    updateDocumentsPanel();

    setTimeout(closeConfirmPopup, 1500);
  } else {
    msg.style.color = 'red';
    msg.textContent = 'Invalid code. Please try again.';
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß
function updateConfirmedActivities() {
  const list = document.getElementById('confirmed-activities-list');
  if (!list) return;

  const confirmedEvents = JSON.parse(localStorage.getItem('confirmedEvents') || '[]');
  list.innerHTML = '';

  confirmedEvents.forEach(ev => {
    const li = document.createElement('li');
    li.textContent = `${ev.title} (${ev.start})`;
    list.appendChild(li);
  });
}

// ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î
document.addEventListener('DOMContentLoaded', () => {
  updateConfirmedActivities();
});
